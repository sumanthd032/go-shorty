// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clicks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClick = `-- name: CreateClick :one
INSERT INTO clicks (
    link_id,
    ip_address,
    user_agent,
    referrer
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, link_id, clicked_at, ip_address, user_agent, referrer
`

type CreateClickParams struct {
	LinkID    int64
	IpAddress pgtype.Text
	UserAgent pgtype.Text
	Referrer  pgtype.Text
}

func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) (Click, error) {
	row := q.db.QueryRow(ctx, createClick,
		arg.LinkID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Referrer,
	)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.ClickedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.Referrer,
	)
	return i, err
}

const getLinkAnalytics = `-- name: GetLinkAnalytics :many
SELECT
    l.id,
    l.alias,
    l.original_url,
    COUNT(c.id) AS total_clicks
FROM
    links l
LEFT JOIN
    clicks c ON l.id = c.link_id
WHERE
    l.user_id = $1
GROUP BY
    l.id
ORDER BY
    total_clicks DESC
`

type GetLinkAnalyticsRow struct {
	ID          int64
	Alias       string
	OriginalUrl string
	TotalClicks int64
}

func (q *Queries) GetLinkAnalytics(ctx context.Context, userID pgtype.Int8) ([]GetLinkAnalyticsRow, error) {
	rows, err := q.db.Query(ctx, getLinkAnalytics, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinkAnalyticsRow
	for rows.Next() {
		var i GetLinkAnalyticsRow
		if err := rows.Scan(
			&i.ID,
			&i.Alias,
			&i.OriginalUrl,
			&i.TotalClicks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
